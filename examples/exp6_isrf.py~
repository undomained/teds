"""
This file executes a sensitivity study for a knowledge errors of the ISRF. 
We consxier two parameters of the generalized normal distribution function, 
    (1) parameter b describing the block shape of the ISRF for given FWHM
    (2) parameter a which is the FWHM
"""
import context
from end_to_end.GM.gm import geometry_module
from end_to_end.SGM.sgm import scene_generation_module
from end_to_end.SIML1B.siml1b import simplified_instrument_model_and_l1b_processor
from end_to_end.SIML1B.radiance_offset import radiance_offset
from end_to_end.L1L2.l1bl2 import level1b_to_level2_processor

import yaml
import sys
import numpy as np
import shutil

if __name__ == "__main__":

    import paths

    global_config = yaml.safe_load(open("./exp6_config.yaml"))

    # ======= geometry module ======================================
    # choose baseline GM config
    if(global_config['setup']['flag_gm']):
        
        shutil.copyfile(paths.project+ paths.GM_module+'gm_config_baseline.yaml', \
                        paths.project+ paths.GM_module+'gm_config.yaml',)

        gm_config = yaml.safe_load(open(paths.project+paths.GM_module+'gm_config.yaml'))
        geometry_module(paths,global_config, gm_config)

    # ======= scene generator module ===============================
    # choose baseline SGM config
    if(global_config['setup']['flag_sgm']):
        
        shutil.copyfile(paths.project+paths.SGM_module+'sgm_config_baseline.yaml', \
                        paths.project+paths.SGM_module+'sgm_config.yaml',)
        sgm_config = yaml.safe_load(open(paths.project+paths.SGM_module+ "sgm_config.yaml"))
        scene_generation_module(paths, global_config, sgm_config)

    # ======= The simplified IM and L1B model ======================
    if(global_config['setup']['flag_siml1b']):
        # choose baseline simplified IM and L1B config
        
        shutil.copyfile(paths.project+paths.SIML1B_module+'siml1b_config_baseline.yaml', \
                        paths.project+paths.SIML1B_module+'siml1b_config.yaml',)

        siml1b_config = yaml.safe_load(open(paths.project+paths.SIML1B_module + "siml1b_config.yaml"))
        simplified_instrument_model_and_l1b_processor(paths, global_config, siml1b_config)

    # ======= L1 to L2 processor ===================================
    if(global_config['setup']['flag_l1bl2']):
        # choose baseline L1BL2 config
        
        shutil.copyfile(paths.project+paths.L1L2_module + 'l1bl2_config_baseline.yaml',
                        paths.project+paths.L1L2_module + 'l1bl2_config.yaml',)
        l1bl2_config = yaml.safe_load(open(paths.project+paths.L1L2_module + "l1bl2_config.yaml"))
        l1bl2_config['pixel_mask'] = False
        l1bl2_config['isrf_settings']['type'] =  'generalized_normal' 

        if(global_config['sw_isrf_block']):
            l1bl2_config['isrf_settings']['fwhm'] = 0.45
            for ibcoeff in range(0,11):
    
                if(ibcoeff == 0):
                    l1bl2_config['xsec_forced'] = True
                else:   
                    l1bl2_config['xsec_forced'] = False

                l1bl2_config['isrf_settings']['bcoeff'] = 0.4 + ibcoeff*0.01

                print('========================================')
                print('fwhm: ',l1bl2_config['isrf_settings']['fwhm'],' bcoeff: ', l1bl2_config['isrf_settings']['bcoeff'])
                print('========================================')
    
                level1b_to_level2_processor(paths,global_config, l1bl2_config)
    
                str_bcoeff = "%.3f" % (l1bl2_config['isrf_settings']['bcoeff'])
                shutil.copyfile(
                    paths.project+paths.data_interface + paths.interface_l2 + 'Tango_Carbon_l2_individual_spectra_exp0006.nc',
                    paths.project+paths.data_interface + paths.interface_l2 +'Tango_Carbon_l2_exp0006.1_bcoeff'+str_bcoeff+'.nc',)

        if(global_config['sw_isrf_fwhm']):

            for iacoeff in range(0,11):
    
                l1bl2_config['isrf_settings']['bcoeff'] = 0.45
                l1bl2_config['isrf_settings']['fwhm'] = 0.43 + 0.004*iacoeff
                
                if(iacoeff == 0):
                    l1bl2_config['xsec_forced'] = True
                else:   
                    l1bl2_config['xsec_forced'] = False
                    
                print('========================================')
                print('fwhm: ',l1bl2_config['isrf_settings']['fwhm'],' bcoeff: ', l1bl2_config['isrf_settings']['bcoeff'])
                print('========================================')
    
                level1b_to_level2_processor(paths,global_config, l1bl2_config)
    
                str_acoeff = "%.3f" % (l1bl2_config['isrf_settings']['fwhm'])
                shutil.copyfile(
                    paths.project+paths.data_interface + paths.interface_l2 + 'Tango_Carbon_l2_individual_spectra_exp0006.nc',
                    paths.project+paths.data_interface + paths.interface_l2 +'Tango_Carbon_l2_exp0006.2_acoeff'+str_acoeff+'.nc',)
